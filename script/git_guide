###############
### READ ME ###
###############

This document is just for my convenience.

#############
### BASIC ###
#############

1. 'git add [ . | PATH | FILE_NAME ]'
Add file to Git index so that git can track your modifications on that file

2. 'git rm --cached [ . | PATH | FILE_NAME ]'
To remove files from Git index, which means you added it before but if you don't want to track it anymore.
It will remove the file from the Git index not in your working directory. In order to remove your physical
file from your repository, use 'git rm [ . | FILE_NAME ]'

3. 'git checkout [ . | PATH | FILE_NAME ]'
It will undo all your modifications that haven't commited yet.

4. 'git diff [ PATH | FILE_NAME]'
show the modifications that haven't added yet

5. 'git commit [ -a : added all | -m : give the message as an argument ]'
Commit your modification. but not upload yet.
ex) 'git commit -m message_here'
ex) 'git commit -a'

6. 'git push'
push your commit to the git server. You can push multiple commits at once

7. 'git pull'
Make your repository as the newest one

##############
### Branch ###
##############

1. Merge
To merge your branch with another one, use git merge
Let's assume that you are working on branch A and you want to merge with branch B then,

'git checkout B' <- go to branch B
'git pull' <- update it 
'git checkout A' <- come back to my branch
'git merge B' <- then merge with branch B, A will be merged with B

2. Remove branch in my local repository
'git branch -d BRANCH_NAME'

3. Create the branch on your local machine and switch in this branch
'git checkout -b [name_of_your_new_branch]'

Push the branch on github :
'git push origin [name_of_your_new_branch]'


#############
### LOG ###
#############

To trace your all modification, use below command.
'git log -p --follow FILE_NAME'

Whenever you want to 
undo previous commit,
'git reset --hard #commit' 

(or go back 
'git checkout #commit')

push it
'git push --force'

or
'git push --force origin master'




#############
### INDEX ###
#############

Show information about files in the index and the working tree
'git ls-files'

